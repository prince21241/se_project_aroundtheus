!function(){"use strict";class e{constructor(e){this._popupElement=document.querySelector(e),this._handleEscClose=this._handleEscClose.bind(this),this._closePopupOutside=this._closePopupOutside.bind(this),this._closeButton=this._popupElement.querySelector(".modal__close"),this._modalButton=this._popupElement.querySelector(".modal__button")}open(){this._popupElement.classList.add("modal_opened"),document.addEventListener("keydown",this._handleEscClose),this._popupElement.addEventListener("mousedown",this._closePopupOutside)}close(){this._popupElement.classList.remove("modal_opened"),document.removeEventListener("keydown",this._handleEscClose),this._popupElement.removeEventListener("mousedown",this._closePopupOutside)}_handleEscClose(e){"Escape"===e.key&&this.close()}_closePopupOutside(e){e.target===this._popupElement&&this.close()}setEventListeners(){this._closeButton.addEventListener("click",(()=>this.close()))}}class t extends e{constructor(e,t){super(e),this._submitButton=this._popupElement.querySelector(".modal__button"),this._handleFormSubmit=t,this._popupForm=this._popupElement.querySelector(".modal__form"),this._inputList=this._popupForm.querySelectorAll(".modal__input"),this._submitButtonText=this._submitButton.textContent}_getInputValues(){const e={};return this._inputList.forEach((t=>{e[t.name]=t.value})),e}reset(){this._popupForm.reset()}_handleSubmit=e=>{e.preventDefault(),this._handleFormSubmit(this._getInputValues())};renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e?this._modalButton.textContent=t:this._submitButton.textContent=this._submitButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",this._handleSubmit)}}class s{constructor(e,t){let{items:s,renderer:i}=e;this._items=s,this._renderer=i,this._container=document.querySelector(t)}renderItems(){this._items.forEach((e=>{this._renderer(e)}))}addItem(e){this._container.prepend(e)}}class i{constructor(e,t,s,i,n){this._data=e,this.isLiked=e.isLiked,this.id=e._id,this._name=e.name,this._link=e.link,this._cardSelector=t,this._handleImageClick=s,this._handleDeleteButton=i,this._handleLikeButton=n}_setEventListeners(){this._likeButton.addEventListener("click",(()=>this._handleLikeButton(this))),this._deleteButton.addEventListener("click",(()=>this._handleDeleteButton(this))),this._cardImageEl.addEventListener("click",(()=>{this._handleImageClick(this._link,this._name)}))}_handleLikes(){this.isLiked?this._likeButton.classList.add("card__like-button_active"):this._likeButton.classList.remove("card__like-button_active")}handleIsLiked(e){this.isLiked=e,this._handleLikes()}deleteCard(){this._cardElement.remove(),this._element=null}getCardElement(){return this._cardElement=document.querySelector(this._cardSelector).content.querySelector(".card").cloneNode(!0),this._cardImageEl=this._cardElement.querySelector(".card__image"),this._cardTitleEl=this._cardElement.querySelector(".card__title"),this._cardImageEl.src=this._link,this._cardImageEl.alt=this._name,this._cardTitleEl.textContent=this._name,this._likeButton=this._cardElement.querySelector(".card__like-button"),this._deleteButton=this._cardElement.querySelector(".card__delete-button"),this._setEventListeners(),this._handleLikes(),this._cardElement}}var n=class{constructor(e,t){this._inputSelector=e.inputSelector,this._submitButtonSelector=e.submitButtonSelector,this._inactiveButtonClass=e.inactiveButtonClass,this._inputErrorClass=e.inputErrorClass,this._errorClass=e.errorClass,this._modalSpan=e.modalSpan,this._form=t}_resetSubmitButton(){this._submitButton.classList.add(this._inactiveButtonClass)}hideInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.remove(this._inputErrorClass),t&&(t.textContent="",t.classList.remove(this._inputErrorClass))}_showInputError(e){const t=this._form.querySelector(`#${e.id}-error`);e.classList.add(this._inputErrorClass),t&&(t.textContent=e.validationMessage,t.classList.add(this._errorClass))}toggleButtonState(){this._isFormValid()?(this._submitButton.classList.remove(this._inactiveButtonClass),this._submitButton.disabled=!1):(this._submitButton.classList.add(this._inactiveButtonClass),this._submitButton.disabled=!0)}_isFormValid(){return this._inputEls.every((e=>e.validity.valid))}_checkInputValidity(e){e.validity.valid?this.hideInputError(e):this._showInputError(e)}_setEventListeners(){this._inputEls=[...this._form.querySelectorAll(this._inputSelector)],this._submitButton=this._form.querySelector(this._submitButtonSelector),this._inputEls.forEach((e=>{e.addEventListener("input",(()=>{this._checkInputValidity(e),this.toggleButtonState()}))}))}enableValidation(){this._form.addEventListener("submit",(e=>{e.preventDefault()})),this._setEventListeners()}resetValidation(){this._inputEls.forEach((e=>{this.hideInputError(e)})),this.toggleButtonState()}};const r=document.getElementById("avatar-button"),o=document.getElementById("profile-edit-button"),l=document.getElementById("profile-add-button"),a=document.getElementById("profile-title-input"),d=document.getElementById("profile-description-input"),u=new class extends e{constructor(e){super(e),this._imageElement=this._popupElement.querySelector(".modal__preview-image"),this._captionElement=this._popupElement.querySelector(".modal__image-text")}open(e){let{name:t,link:s}=e;this._imageElement.src=s,this._imageElement.alt=t,this._captionElement.textContent=t,super.open()}}("#image-modal");u.setEventListeners();const h=new class extends e{constructor(e){super(e),this._popupForm=this._popupElement.querySelector(".modal__form"),this._popupDeleteButton=this._popupElement.querySelector(".modal__button"),this._popupDeleteButtonText=this._popupDeleteButton.textContent}handleDelete(e){this._handleDeleteSubmit=e}renderLoading(e){let t=arguments.length>1&&void 0!==arguments[1]?arguments[1]:"Saving...";e?this._modalButton.textContent=t:this._popupDeleteButton.textContent=this._popupDeleteButtonText}setEventListeners(){super.setEventListeners(),this._popupForm.addEventListener("submit",(e=>{e.preventDefault(),this._handleDeleteSubmit()}))}}("#delete-card-modal");h.setEventListeners();const c=new t("#profile-edit-modal",(e=>{var t;t=e,f((function(){return _.updateUserInfo(t).then((e=>{m.setUserInfo(e)}))}),c,!0)}));c.setEventListeners();const _=new class{constructor(e){let{baseUrl:t,headers:s}=e;this._baseUrl=t,this._headers=s}_handleResponse(e){return e.ok?e.json():Promise.reject(`Error: ${e.status}`)}_request(e,t){return fetch(e,t).then(this._handleResponse)}getUserInfo(){return this._request(`${this._baseUrl}/users/me`,{headers:this._headers})}updateUserInfo(e){return this._request(`${this._baseUrl}/users/me`,{method:"PATCH",headers:this._headers,body:JSON.stringify({name:`${e.name}`,about:`${e.description}`})})}updateProfileImage(e){return this._request(`${this._baseUrl}/users/me/avatar`,{method:"PATCH",headers:this._headers,body:JSON.stringify({avatar:e})})}getInitialCards(){return this._request(`${this._baseUrl}/cards`,{headers:this._headers})}createCard(e){return this._request(`${this._baseUrl}/cards`,{method:"POST",body:JSON.stringify({name:`${e.title}`,link:`${e.url}`}),headers:this._headers})}deleteCard(e){return this._request(`${this._baseUrl}/cards/${e}`,{method:"DELETE",headers:this._headers})}likeCard(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"PUT",headers:this._headers})}deleteLike(e){return this._request(`${this._baseUrl}/cards/${e}/likes`,{method:"DELETE",headers:this._headers})}}({baseUrl:"https://around-api.en.tripleten-services.com/v1",headers:{authorization:"2db58c83-3523-4135-8564-2660432887a4","Content-Type":"application/json"}}),m=new class{constructor(e){let{titleSelector:t,descriptionSelector:s,profileImage:i}=e;this._titleElement=document.querySelector(t),this._descriptionElement=document.querySelector(s),this._imageElement=document.querySelector(i)}getUserInfo(){return{name:this._titleElement.textContent,about:this._descriptionElement.textContent}}setUserInfo(e){this._titleElement.textContent=e.name,this._descriptionElement.textContent=e.about}setProfileImage(e){this._imageElement.src=e.avatar}}({titleSelector:".profile__title",descriptionSelector:".profile__description",profileImage:".profile__image"}),p=new t("#add-card-modal",(e=>{var t;t=e,f((function(){return _.createCard(t).then((e=>{b(e)}))}),p,!0)}));p.setEventListeners();const E=new t("#profile-image-modal",(e=>{var t;t=e.url,f((function(){return _.updateProfileImage(t).then((e=>{m.setProfileImage(e)}))}),E,!0)}));let v;function b(e){const t=function(e){return new i(e,"#card-template",g,L,S).getCardElement()}(e);v.addItem(t)}function g(e,t){u.open({name:t,link:e})}function f(e,t,s){let i=arguments.length>3&&void 0!==arguments[3]?arguments[3]:"Saving...";t.renderLoading(!0,i),e().then((()=>{t.close(),s&&t.reset()})).catch(console.error).finally((()=>{t.renderLoading(!1)}))}function L(e){return h.open(),h.handleDelete((()=>{f((function(){return _.deleteCard(e.id).then((()=>{e.deleteCard()}))}),h,!1,"Deleting...")}))}function S(e){e.isLiked&&_.deleteLike(e.id).then((()=>{e.handleIsLiked(!1)})).catch((e=>{console.log(`Unable to process request, ${e}`)})),e.isLiked||_.likeCard(e.id).then((()=>{e.handleIsLiked(!0)})).catch((e=>{console.log(`Unable to process request, ${e}`)}))}E.setEventListeners(),o.addEventListener("click",(()=>{const{name:e,about:t}=m.getUserInfo();a.value=e,d.value=t,c.open(),C["profile-form"].resetValidation()})),l.addEventListener("click",(()=>{p.open(),C["add-card-form"].resetValidation()})),r.addEventListener("click",(()=>{E.open(),C["profile-image-form"].resetValidation()})),_.getUserInfo().then((e=>{m.setProfileImage(e),m.setUserInfo({name:e.name,about:e.about})})).catch((e=>{console.log(`Unable to process request, ${e}`)})),_.getInitialCards().then((e=>{v=new s({items:e,renderer:e=>{b(e)}},".cards__list"),v.renderItems(e)})).catch((e=>{console.log(`Unable to process request, ${e}`)}));const C={};var B;B={formSelector:".modal__form",inputSelector:".modal__input",submitButtonSelector:".modal__button",inactiveButtonClass:"modal__button_disabled",inputErrorClass:"modal__input_type_error",errorClass:"modal__error_visible",modalSpan:".modal__span"},Array.from(document.querySelectorAll(B.formSelector)).forEach((e=>{const t=new n(B,e),s=e.getAttribute("name");C[s]=t,t.enableValidation()}))}();
//# sourceMappingURL=data:application/json;charset=utf-8;base64,